#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Gestionnaire  pour impression, create, reprint et expedition.
"""

import re
import json
import time
import threading
from datetime import datetime
from src.ui.system_utils import log, is_printer_service_running


class ScanManager:
    """
    Gestionnaire de scan simplifi√© pour impression et exp√©dition uniquement.
    """

    # === √âTATS ===
    STATE_IDLE = 0
    STATE_AWAIT_REPRINT_SERIAL = 1
    STATE_AWAIT_REPRINT_CONFIRM = 2
    STATE_AWAIT_EXPEDITION_SERIAL = 3
    STATE_AWAIT_EXPEDITION_CONFIRM = 4
    STATE_AWAIT_SAV_SERIAL = 5
    STATE_AWAIT_SAV_CONFIRM = 6

    # === CONSTANTES ===
    SERIAL_PATTERN = r"RW-48v271[A-Za-z0-9]{4}"
    TIMEOUT_S = 30

    def __init__(self, app):
        """
        Initialise le gestionnaire de scan simplifi√©.
        
        Args:
            app: Instance de l'application SimpleApp
        """
        self.app = app
        self.current_state = self.STATE_IDLE

        # Donn√©es temporaires
        self.serial_to_reprint = None
        self.serials_for_expedition = []
        self.expedition_mode_active = False
        self.serial_for_sav = None

        # Timer de timeout
        self.timeout_timer_id = None

        log("ScanManager: Initialis√©", level="INFO")

    def process_scan(self, scanned_text):
        """
        Point d'entr√©e principal pour traiter un scan.
        
        Args:
            scanned_text (str): Texte scann√©/saisi
        """
        text = scanned_text.strip().lower()

        log(f"ScanManager: Traitement '{text}' dans √©tat {self.current_state}",
            level="INFO")

        # === COMMANDES GLOBALES ===
        if self.current_state == self.STATE_IDLE:
            if self._handle_global_commands(text, scanned_text):
                return

        # === COMMANDE CANCEL (en mode exp√©dition) ===
        if text == "cancel" and self.expedition_mode_active:
            self._handle_expedition_cancel()
            return

        # === DISPATCH SELON L'√âTAT ===
        handlers = {
            self.STATE_IDLE: self._handle_idle_state,
            self.STATE_AWAIT_REPRINT_SERIAL: self._handle_await_reprint_serial,
            self.STATE_AWAIT_REPRINT_CONFIRM:
            self._handle_await_reprint_confirm,
            self.STATE_AWAIT_EXPEDITION_SERIAL:
            self._handle_await_expedition_serial,
            self.STATE_AWAIT_EXPEDITION_CONFIRM:
            self._handle_await_expedition_confirm,
            self.STATE_AWAIT_SAV_SERIAL: self._handle_await_sav_serial,
            self.STATE_AWAIT_SAV_CONFIRM: self._handle_await_sav_confirm,
        }

        handler = handlers.get(self.current_state)
        if handler:
            handler(scanned_text)
        else:
            log(f"ScanManager: √âtat inconnu {self.current_state}",
                level="ERROR")
            self._reset_scan()

    def _handle_global_commands(self, text_lower, original_text):
        """
        G√®re les commandes globales disponibles depuis IDLE.
        
        Returns:
            bool: True si une commande a √©t√© trait√©e
        """
        # === CREATE ===
        if text_lower.startswith("create "):
            return self._handle_create_command(original_text)

        # === REPRINT ===
        elif text_lower == "reprint":
            return self._handle_reprint_command()

        # === EXPEDITION ===
        elif text_lower == "expedition":
            return self._handle_expedition_command()

        # === SAV ===
        elif text_lower == "sav":
            return self._handle_sav_command()

        return False

    def _handle_create_command(self, text):
        """G√®re la commande create <nom>."""
        if not is_printer_service_running():
            self._update_ui("‚ùå Service d'impression inactif",
                            "Impossible de cr√©er une √©tiquette")
            self.app.add_message("‚ùå Service d'impression non d√©tect√©", "error")
            return True

        try:
            checker_name = text.split(" ", 1)[1].strip()
            if not checker_name:
                raise ValueError("Nom vide")
        except (IndexError, ValueError):
            self._update_ui("‚ùå Format incorrect", "Utilisez: create <nom>")
            self.app.add_message("‚ùå Format incorrect. Utilisez: create <nom>",
                                 "error")
            return True

        # Envoi MQTT
        if self.app.mqtt_client and self.app.mqtt_client.is_connected():
            payload = json.dumps({"checker_name": checker_name})
            self.app.mqtt_client.publish("printer/create_label",
                                         payload,
                                         qos=1)

            self._update_ui(f"‚úÖ √âtiquette demand√©e",
                            f"Valid√©e par {checker_name.title()}")
            self.app.add_message(
                f"‚úÖ √âtiquette cr√©√©e pour {checker_name.title()}", "success")
        else:
            self._update_ui("‚ùå Erreur MQTT", "Client d√©connect√©")
            self.app.add_message("‚ùå Impossible d'envoyer - MQTT d√©connect√©",
                                 "error")

        return True

    def _handle_reprint_command(self):
        """G√®re la commande reprint."""
        if not is_printer_service_running():
            self._update_ui("‚ùå Service d'impression inactif",
                            "R√©impression impossible")
            self.app.add_message("‚ùå Service d'impression non d√©tect√©", "error")
            return True

        self._change_state(self.STATE_AWAIT_REPRINT_SERIAL)
        self._update_ui("üîÑ Mode R√©impression",
                        "Scanner le num√©ro de s√©rie √† r√©imprimer")
        self.app.add_message("üîÑ Mode r√©impression activ√©", "info")
        self._start_timeout()
        return True

    def _handle_expedition_command(self):
        """G√®re la commande expedition."""
        if not is_printer_service_running():
            self._update_ui("‚ùå Service d'impression inactif",
                            "Exp√©dition impossible")
            self.app.add_message("‚ùå Service d'impression non d√©tect√©", "error")
            return True

        if not self.expedition_mode_active:
            # D√©marrer le mode exp√©dition
            self._change_state(self.STATE_AWAIT_EXPEDITION_SERIAL)
            self.expedition_mode_active = True
            self.serials_for_expedition = []

            self._update_ui(
                "üì¶ Mode Exp√©dition",
                "Scanner les num√©ros de s√©rie (ou 'expedition' pour terminer)")
            self.app.add_message("üì¶ Mode exp√©dition activ√©", "info")
        else:
            # Terminer le mode exp√©dition
            self._change_state(self.STATE_AWAIT_EXPEDITION_CONFIRM)
            self._handle_expedition_finalize()

        return True

    def _handle_await_expedition_confirm(self, text):
        """G√®re la confirmation finale d'exp√©dition."""
        # Cette m√©thode est appel√©e apr√®s avoir scann√© "expedition" une 2e fois
        # La finalisation se fait directement dans _handle_expedition_finalize()
        pass

    def _handle_end_command(self):
        """G√®re la commande end (arr√™t services externes)."""
        self._update_ui("‚èπÔ∏è Commande END", "Signal d'arr√™t envoy√©")
        self.app.add_message("‚èπÔ∏è Commande END ex√©cut√©e", "warning")
        # Vous pouvez ajouter ici la logique pour arr√™ter des services externes
        return True

    def _handle_reset_services_command(self):
        """G√®re la commande reset (red√©marrage services)."""
        self._update_ui("üîÑ Reset Services", "Commande de reset envoy√©e")
        self.app.add_message("üîÑ Reset des services demand√©", "warning")
        # Vous pouvez ajouter ici la logique pour red√©marrer des services
        return True

    def _handle_idle_state(self, text):
        """G√®re l'√©tat IDLE (d√©faut)."""
        # Si ce n'est pas une commande reconnue, l'interpr√©ter comme un serial
        serial = self._extract_serial(text)
        if serial:
            self._update_ui(f"üìã S√©rie d√©tect√©e: {serial}",
                            "Utilisez 'reprint' pour r√©imprimer")
            self.app.add_message(f"üìã Num√©ro de s√©rie d√©tect√©: {serial}",
                                 "info")
        else:
            self._update_ui("‚ùì Commande inconnue",
                            "Voir la liste des commandes en bas")
            self.app.add_message(f"‚ùì Commande non reconnue: {text}", "warning")

    def _handle_await_reprint_serial(self, text):
        """G√®re l'attente du serial pour r√©impression."""
        serial = self._extract_serial(text)
        if not serial:
            self._update_ui("‚ùå S√©rie invalide",
                            "Format attendu: RW-48v271XXXX")
            self.app.add_message(f"‚ùå Format de s√©rie invalide: {text}",
                                 "error")
            self._delayed_reset(2000)
            return

        self.serial_to_reprint = serial
        self._change_state(self.STATE_AWAIT_REPRINT_CONFIRM)

        self._update_ui(f"‚úÖ S√©rie: {serial}",
                        "Scanner 'reprint' pour confirmer")
        self.app.add_message(f"‚úÖ S√©rie s√©lectionn√©e: {serial}", "success")
        self._start_timeout()

    def _handle_await_reprint_confirm(self, text):
        """G√®re la confirmation de r√©impression."""
        if text.lower().strip() != "reprint":
            self._update_ui("‚ùå Confirmation incorrecte",
                            "Scanner 'reprint' pour confirmer")
            self.app.add_message(f"‚ùå Attendu 'reprint', re√ßu: {text}", "error")
            self._delayed_reset(2000)
            return

        # Envoyer la demande de r√©impression
        if self.app.mqtt_client and self.app.mqtt_client.is_connected():
            self.app.mqtt_client.publish("printer/request_full_reprint",
                                         self.serial_to_reprint,
                                         qos=1)

            self._update_ui("üñ®Ô∏è R√©impression lanc√©e",
                            f"S√©rie: {self.serial_to_reprint}")
            self.app.add_message(
                f"üñ®Ô∏è R√©impression lanc√©e pour {self.serial_to_reprint}",
                "success")
        else:
            self._update_ui("‚ùå Erreur MQTT", "Impossible d'envoyer la demande")
            self.app.add_message("‚ùå MQTT d√©connect√© - r√©impression √©chou√©e",
                                 "error")

        self._reset_scan()

    def _handle_await_expedition_serial(self, text):
        """G√®re l'attente des serials pour exp√©dition."""
        # V√©rifier si c'est la commande pour terminer
        if text.lower().strip() == "expedition":
            self._change_state(self.STATE_AWAIT_EXPEDITION_CONFIRM)
            self._handle_expedition_finalize()
            return

        serial = self._extract_serial(text)
        if not serial:
            self._update_ui(
                "‚ùå S√©rie invalide",
                "Format: RW-48v271XXXX ou 'expedition' pour terminer")
            self.app.add_message(f"‚ùå Format invalide: {text}", "error")
            return

        if serial not in self.serials_for_expedition:
            self.serials_for_expedition.append(serial)
            self.app.add_message(f"‚ûï Ajout√©: {serial}", "success")
            #V√©rifier si c'est un retour SAV
            self._check_and_handle_sav_return(serial)
        else:
            self.app.add_message(f"‚ö†Ô∏è D√©j√† dans la liste: {serial}", "warning")

        count = len(self.serials_for_expedition)
        self._update_ui(
            f"üì¶ {count} batterie(s) scann√©e(s)",
            "Scanner plus de s√©ries ou 'expedition' pour terminer")

    def _check_and_handle_sav_return(self, serial):
        """
        V√©rifie si une batterie est en SAV et la traite automatiquement.
        
        Args:
            serial (str): Num√©ro de s√©rie √† v√©rifier
        """
        try:
            from src.labels import CSVSerialManager

            if CSVSerialManager.is_battery_in_sav(serial):
                self.app.add_message(f"üîß Retour SAV d√©tect√©: {serial}", "info")

                # Pr√©parer pour la sortie SAV automatique lors de la finalisation
                log(f"ScanManager: Batterie {serial} marqu√©e pour sortie SAV automatique",
                    level="INFO")

        except Exception as e:
            log(f"ScanManager: Erreur v√©rification SAV pour {serial}: {e}",
                level="ERROR")

    def _handle_expedition_finalize(self):
        """Finalise l'exp√©dition."""
        if not self.serials_for_expedition:
            self._update_ui("‚ùå Aucune batterie", "Exp√©dition annul√©e")
            self.app.add_message("‚ùå Aucune batterie scann√©e pour l'exp√©dition",
                                 "error")
            self._reset_scan()
            return

        if not (self.app.mqtt_client and self.app.mqtt_client.is_connected()):
            self._update_ui("‚ùå MQTT d√©connect√©",
                            "Impossible de traiter l'exp√©dition")
            self.app.add_message("‚ùå MQTT d√©connect√© - exp√©dition √©chou√©e",
                                 "error")
            self._reset_scan()
            return

        # Traiter l'exp√©dition
        timestamp_iso = datetime.now().isoformat()
        topic_expedition = "printer/update_shipping_timestamp"
        topic_sav_departure = "printer/sav_departure"

        success_count = 0
        sav_count = 0

        for serial in self.serials_for_expedition:
            try:
                from src.labels import CSVSerialManager

                # V√©rifier AVANT si c'est une batterie SAV
                is_sav_battery = CSVSerialManager.is_battery_in_sav(serial)

                if is_sav_battery:
                    # SEULEMENT sortie SAV, PAS d'exp√©dition normale
                    payload_sav = {
                        "serial_number": serial,
                        "timestamp_depart": timestamp_iso
                    }
                    self.app.mqtt_client.publish(topic_sav_departure,
                                                 json.dumps(payload_sav),
                                                 qos=1)
                    sav_count += 1
                    self.app.add_message(f"  Sortie SAV: {serial}", "info")
                else:
                    # Exp√©dition normale uniquement
                    payload_expedition = {
                        "serial_number": serial,
                        "timestamp_expedition": timestamp_iso
                    }
                    self.app.mqtt_client.publish(
                        topic_expedition,
                        json.dumps(payload_expedition),
                        qos=1)

                success_count += 1

            except Exception as e:
                log(f"ScanManager: Erreur exp√©dition {serial}: {e}",
                    level="ERROR")

        if success_count == len(self.serials_for_expedition):
            msg = f"‚úÖ {success_count} batteries exp√©di√©es"
            if sav_count > 0:
                msg += f" (dont {sav_count} retours SAV)"

            self._update_ui(msg, "Mise √† jour CSV et email en cours...")
            self.app.add_message(
                f"‚úÖ Exp√©dition r√©ussie: {success_count} batteries", "success")

            if sav_count > 0:
                self.app.add_message(
                    f"üîß Sorties SAV automatiques: {sav_count}", "success")

            # Afficher la liste dans les messages
            for serial in self.serials_for_expedition:
                self.app.add_message(f"  üì¶ {serial}", "info")

            # Envoyer l'email d'exp√©dition
            self._send_expedition_email(self.serials_for_expedition,
                                        timestamp_iso)
        else:
            self._update_ui(
                f"‚ö†Ô∏è Exp√©dition partielle",
                f"{success_count}/{len(self.serials_for_expedition)} r√©ussies")
            self.app.add_message(
                f"‚ö†Ô∏è Exp√©dition partielle: {success_count}/{len(self.serials_for_expedition)}",
                "warning")

        self._reset_scan()

    def _handle_expedition_cancel(self):
        """G√®re l'annulation de l'exp√©dition."""
        count = len(self.serials_for_expedition)
        self._update_ui("‚ùå Exp√©dition annul√©e", f"{count} batteries ignor√©es")
        self.app.add_message(f"‚ùå Exp√©dition annul√©e ({count} batteries)",
                             "warning")
        self._reset_scan()

    def _handle_sav_command(self):
        """G√®re la commande SAV."""
        if not is_printer_service_running():
            self._update_ui("‚ùå Service d'impression inactif", "SAV impossible")
            self.app.add_message("‚ùå Service d'impression non d√©tect√©", "error")
            return True

        self._change_state(self.STATE_AWAIT_SAV_SERIAL)
        self._update_ui("üîß Mode SAV",
                        "Scanner le num√©ro de s√©rie √† enregistrer en SAV")
        self.app.add_message("üîß Mode SAV activ√©", "info")
        self._start_timeout()
        return True

    def _handle_await_sav_serial(self, text):
        """G√®re l'attente du serial pour SAV."""
        serial = self._extract_serial(text)
        if not serial:
            self._update_ui("‚ùå S√©rie invalide",
                            "Format attendu: RW-48v271XXXX")
            self.app.add_message(f"‚ùå Format de s√©rie invalide: {text}",
                                 "error")
            self._delayed_reset(2000)
            return

        self.serial_for_sav = serial
        self._change_state(self.STATE_AWAIT_SAV_CONFIRM)

        self._update_ui(f"‚úÖ S√©rie SAV: {serial}",
                        "Scanner 'sav' pour confirmer l'entr√©e")
        self.app.add_message(f"‚úÖ S√©rie s√©lectionn√©e pour SAV: {serial}",
                             "success")
        self._start_timeout()

    def _handle_await_sav_confirm(self, text):
        """G√®re la confirmation SAV."""
        if text.lower().strip() != "sav":
            self._update_ui("‚ùå Confirmation incorrecte",
                            "Scanner 'sav' pour confirmer")
            self.app.add_message(f"‚ùå Attendu 'sav', re√ßu: {text}", "error")
            self._delayed_reset(2000)
            return

        # Envoyer la demande SAV via MQTT
        if self.app.mqtt_client and self.app.mqtt_client.is_connected():
            payload = json.dumps({
                "serial_number":
                self.serial_for_sav,
                "timestamp_sav_arrivee":
                datetime.now().isoformat(),
                "technicien":
                "Scanner_User"  # Optionnel pour futur usage
            })
            self.app.mqtt_client.publish("printer/sav_entry", payload, qos=1)

            self._update_ui("üîß SAV enregistr√©",
                            f"S√©rie: {self.serial_for_sav}")
            self.app.add_message(
                f"üîß SAV enregistr√© pour {self.serial_for_sav}", "success")
        else:
            self._update_ui("‚ùå Erreur MQTT", "Impossible d'enregistrer le SAV")
            self.app.add_message("‚ùå MQTT d√©connect√© - SAV √©chou√©", "error")

        self._reset_scan()

    def _extract_serial(self, text):
        """
        Extrait un num√©ro de s√©rie valide du texte.
        
        Returns:
            str|None: Num√©ro de s√©rie ou None
        """
        match = re.search(self.SERIAL_PATTERN, text)
        return match.group(0) if match else None

    def _change_state(self, new_state):
        """Change l'√©tat du scanner."""
        log(f"ScanManager: √âtat {self.current_state} -> {new_state}",
            level="DEBUG")
        self.current_state = new_state
        self._cancel_timeout()

    def _start_timeout(self):
        """D√©marre le timer de timeout."""
        self._cancel_timeout()
        self.timeout_timer_id = self.app.after(self.TIMEOUT_S * 1000,
                                               self._timeout_expired)

    def _cancel_timeout(self):
        """Annule le timer de timeout."""
        if self.timeout_timer_id:
            try:
                self.app.after_cancel(self.timeout_timer_id)
            except ValueError:
                pass
            self.timeout_timer_id = None

    def _timeout_expired(self):
        """Appel√©e quand le timeout expire."""
        log("ScanManager: Timeout expir√©", level="INFO")
        self._update_ui("‚è∞ Timeout", "Op√©ration annul√©e")
        self.app.add_message("‚è∞ Timeout - op√©ration annul√©e", "warning")
        self._reset_scan()

    def _delayed_reset(self, delay_ms):
        """Reset avec d√©lai."""
        self._cancel_timeout()
        self.app.after(delay_ms, self._reset_scan)

    def _reset_scan(self):
        """Remet le scanner √† l'√©tat initial."""
        log("ScanManager: Reset", level="DEBUG")

        self.current_state = self.STATE_IDLE
        self.serial_to_reprint = None
        self.serials_for_expedition = []
        self.expedition_mode_active = False
        self.serial_for_sav = None

        self._cancel_timeout()

        self._update_ui("Pr√™t.", "Veuillez scanner ou saisir une commande...")

    def _send_expedition_email(self, serial_numbers, timestamp_expedition):
        """
        Envoie l'email d'exp√©dition de mani√®re asynchrone.
        
        Args:
            serial_numbers (list): Liste des num√©ros de s√©rie exp√©di√©s
            timestamp_expedition (str): Timestamp ISO d'exp√©dition
        """

        def send_email_async():
            try:
                # Import des modules email ici pour √©viter les d√©pendances au d√©marrage
                from src.ui.email import EmailTemplates, email_config
                import smtplib
                from email.mime.text import MIMEText
                from email.mime.multipart import MIMEMultipart
                import socket

                # V√©rifier la configuration email
                if not email_config.is_configured():
                    missing_items = email_config.get_missing_config_items()
                    log(f"ScanManager: Config email incompl√®te: {missing_items}",
                        level="ERROR")
                    self.app.after(
                        0, lambda: self.app.add_message(
                            "‚ùå Configuration email manquante", "error"))
                    return

                # G√©n√©rer le contenu de l'email
                try:
                    subject = EmailTemplates.generate_expedition_subject(
                        timestamp_expedition)
                    text_content, html_content = EmailTemplates.generate_expedition_email_content(
                        serial_numbers, timestamp_expedition)
                except Exception as template_error:
                    log(f"ScanManager: Erreur template email: {template_error}",
                        level="ERROR")
                    self.app.after(
                        0, lambda: self.app.add_message(
                            "‚ùå Erreur g√©n√©ration email", "error"))
                    return

                # Cr√©er le message MIME
                message = MIMEMultipart("alternative")
                message["Subject"] = subject
                message["From"] = email_config.gmail_user
                message["To"] = ", ".join(email_config.recipient_emails)

                # Ajouter le contenu
                part_text = MIMEText(text_content, "plain")
                part_html = MIMEText(html_content, "html")
                message.attach(part_text)
                message.attach(part_html)

                # Envoyer l'email
                server = smtplib.SMTP_SSL(email_config.smtp_server,
                                          email_config.smtp_port)
                server.ehlo()
                server.login(email_config.gmail_user,
                             email_config.gmail_password)
                server.sendmail(email_config.gmail_user,
                                email_config.recipient_emails,
                                message.as_string())
                server.close()

                # Succ√®s
                log(f"ScanManager: Email exp√©dition envoy√© pour {len(serial_numbers)} batteries",
                    level="INFO")
                self.app.after(
                    0, lambda: self.app.add_message(
                        f"üìß Email d'exp√©dition envoy√© ({len(serial_numbers)} batteries)",
                        "success"))

            except smtplib.SMTPAuthenticationError:
                log("ScanManager: Erreur authentification email",
                    level="ERROR")
                self.app.after(
                    0, lambda: self.app.add_message(
                        "‚ùå Erreur authentification email", "error"))

            except (socket.gaierror, OSError) as e:
                log(f"ScanManager: Erreur r√©seau email: {e}", level="ERROR")
                self.app.after(
                    0, lambda: self.app.add_message(
                        "‚ùå Erreur r√©seau - email non envoy√©", "error"))

            except Exception as e:
                log(f"ScanManager: Erreur email inattendue: {e}",
                    level="ERROR")
                self.app.after(
                    0, lambda: self.app.add_message("‚ùå Erreur envoi email",
                                                    "error"))

        # Lancer l'envoi dans un thread s√©par√© pour ne pas bloquer l'UI
        import threading
        email_thread = threading.Thread(target=send_email_async, daemon=True)
        email_thread.start()

        # Indiquer que l'envoi est en cours
        self.app.add_message("üìß Envoi email en cours...", "info")

    def _update_ui(self, msg1, msg2):
        """Met √† jour les labels de r√©ponse."""
        self.app.update_response_labels(msg1, msg2)
